input {
  file {
    start_position => "beginning"
    path => "C:/Users/sefid/Desktop/testing_logstash/Test1/Offer.csv"
    sincedb_path => "NULL"
  }
}
filter {
  csv {
    columns => ["id","car","priceForKm","priceForTime","startDate","endDate","startPlacelatitude","startPlacelongitude","startPlaceAdress","endPlaces","available","startPlace"]
    convert => {
      "priceForKm" => "float"
      "priceForTime" => "float"
      "available" => "boolean"
      "startDate" => "integer"
      "endDate" => "integer"
    }
    remove_field => ["message"]
  }
  grok {
    match => {
      "endPlaces" => "\[\{\"%{WORD}\":%{NUMBER:lat},\"%{WORD}\"\:%{NUMBER:lon},\"%{WORD}\"\:\"%{WORD:adress}%{GREEDYDATA}"
    }
  }
  date {
    target => "Dateofstart"
    match => ["startDate", "dd-MM-yyyy", "UNIX"]
    timezone => "Europe/Berlin"
  }
  date {
    target => "Dateofend"
    match => ["endDate", "dd-MM-yyyy", "UNIX"]
    timezone => "Europe/Berlin"
  }
  mutate {convert => ["startPlacelatitude", "float"]}
  mutate {convert => ["startPlacelongitude", "float"]}
  mutate {convert => ["lat", "float"]}
  mutate {convert => ["lon", "float"]}
  mutate {rename => ["startPlacelongitude", "[start_place][lon]"]}
  mutate {rename => ["startPlacelatitude", "[start_place][lat]"]}
  mutate {rename => ["lat", "[location][lat]"]}
  mutate {rename => ["lon", "[location][lon]"]}
}
output {
  elasticsearch {
    hosts => ["http://localhost:9200/"]
    index => ["offers-test54"]
  }
  stdout {codec => "dots"}
  if "_dateparsefailure" in [tags] {
    stdout {codec => "rubydebug"}
  }
}
