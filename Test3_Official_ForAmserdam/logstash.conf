input {
  file {
    path => "C:/Users/Mirsat/Desktop/WORK/testing_logstash/Test3_Official_ForAmserdam/output.json"
    sincedb_path => "NULL"
    start_position => "beginning"
    codec => json
  }
}
filter {
  date {
    match => ["startDateOfOffer", "dd-MM-yyyy"]
    target => "@timestamp"
    timezone => "Europe/Berlin"
  }
  date {
    match => ["endDateOfOffer", "dd-MM-yyyy", "ISO8601"]
    timezone => "Europe/Berlin"
  }
  date {
    match => ["startDateOfTravel", "dd-MM-yyyy", "ISO8601"]
    timezone => "Europe/Berlin"
  }
  date {
    match => ["startDateOfTravel", "dd-MM-yyyy", "ISO8601"]
    timezone => "Europe/Berlin"
  }
  date {
    match => ["endDateOfTravel", "dd-MM-yyyy", "ISO8601"]
    timezone => "Europe/Berlin"
  }
  mutate {convert => {"available" => "boolean"}}
  mutate {convert => {"balance" => "float"}}
  mutate {convert => {"canceled" => "boolean"}}
  mutate {convert => {"carLicensePlate" => "integer"}}
  mutate {convert => {"deposit" => "float"}}
  mutate {convert => {"depositeBalance" => "float"}}
  mutate {convert => {"kmTraveled" => "float"}}
  mutate {convert => {"priceBalance" => "float"}}
  mutate {convert => {"priceForKm" => "float"}}
  mutate {convert => {"priceForTime" => "float"}}
  mutate {convert => {"rentForTime" => "boolean"}}
  mutate {convert => {"reputation" => "integer"}}
  mutate {convert => {"rewardBalance" => "float"}}
  mutate {convert => {"seatsAvailable" => "integer"}}
  mutate {convert => {"totalPrice" => "float"}}
  mutate {
    add_field => {
      "User_Engagement_Rate" => "0"
    }
    convert => {
      "User_Engagement_Rate" => "float"
    }
    add_field => {
      "Return_on_investment" => "0"
    }
    convert => {
      "Return_on_investment" => "float"
    }
  }
  ruby {
    code => "
    if event.get('[balance]').to_f.nonzero? and event.get('[totalPrice]').to_f.nonzero? then event.set('[User_Engagement_Rate]', ((event.get('[balance]').to_f / event.get('[totalPrice]').to_f) * 100).to_f) else event.set('[User_Engagement_Rate]', 0) end
    if (event.get('[priceBalance]').to_f.nonzero? or event.get('[rewardBalance]').to_f.nonzero?) and event.get('[rewardBalance]').to_f.nonzero? then event.set('[Return_on_investment]', ((event.get('[priceBalance]').to_f - event.get('[rewardBalance]').to_f) / event.get('[rewardBalance]').to_f).to_f) else event.set('[Return_on_investment]', 0) end
    "
  }
}
output {
  elasticsearch {
    hosts => ["http://15.237.93.29:8082/"]
    index => ["simulation_car_sharing_er_roi"]
  }
  stdout { codec => "dots" }
  if "_rubyparsefailure" in [tags] {
    stdout {codec => "rubydebug"}
  }
  if "_dateparsefailure" in [tags] {
    stdout {codec => "rubydebug"}
  }
  if "_grokparsefailure" in [tags] {
    stdout {codec => "rubydebug"}
  }
}
