input {
  http_poller {
    urls => {
      smartapi => {
        method => get
        url => "https://articonf1.itec.aau.at:30103/api/use-cases/crowd-journalism-enum/tables/purchase/layers/Price_Layer/nodes"
        headers => {
          Accept => "application/json"
          Authorization => "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InJlZ3VsYXJAaXRlYy5hYXUuYXQiLCJjcmVhdGVkX2F0IjoiMjAyMS0wNC0xOSAxNjo1Nzo0OS4wNjQwNDIiLCJ2YWxpZF91bnRpbCI6IjIwMjEtMDQtMjAgMTY6NTc6NDkuMDY0MDQyIn0.buFPRVuRq1-FWW5ClqVU4U4UjIj962gLLCSm3ZBWLXU"
        }
      }
    }
    truststore => "C:/Users/Mirsat/Desktop/WORK/testing_logstash/API-Testing/smartapi.jks"
    truststore_password => "changeit"
    request_timeout => 4000
    connect_timeout => 100
    socket_timeout => 100
    schedule => { every => "30s" }
    codec => json
  }
}
# filter {
#   mutate {
#         gsub => [
#           "Total_Demand_MWh", "\"", ""
#         ]
#       }
#   mutate {convert => ["Total_Demand_MWh", "float"]}
#   date {
#     match => ["Timestamp", "yyyy-MM-dd HH:mm:ss"]
#     timezone => "Europe/Berlin"
#     target => "Timestamp"
#   }
# }
filter {
  mutate {
    add_field => {
      "purchaseDayOfWeek" => ""
    }
    add_field => {
      "ROI" => "0"
    }
    add_field => {
      "prevEvent" => ""
    }
  }
  elasticsearch {
    hosts => ["http://15.237.93.29:8082/"]
    index => ["smart_crowd_jurnalism_price_layers_nodes"]
    query  => "_id:%{videoid}"
    fields => {
      "purchase" => "prevEvent"
    }
  }
  mutate {rename => ["timestamp", "purchaseTimestamp"]}
  # mutate {rename => ["UniqueID", "[purchase][UniqueID]"]}
  # mutate {rename => ["layer_name", "[purchase][layer_name]"]}
  # mutate {rename => ["objecttype", "[purchase][objecttype]"]}
  # mutate {rename => ["ownerid", "[purchase][ownerid]"]}
  # mutate {rename => ["price", "[purchase][price]"]}
  # mutate {rename => ["use_case", "[purchase][use_case]"]}
  # mutate {rename => ["use_case_table", "[purchase][use_case_table]"]}
  # mutate {rename => ["userid", "[purchase][userid]"]}
  # mutate {rename => ["videoid", "[purchase][videoid]"]}
  
  ruby {
    code => "
      require 'date'
		  require 'time'
      time = event.get('[purchaseTimestamp]')
      d = DateTime.parse(time).to_time.to_i
      event.set('[purchaseTimestamp]', d)
      event.set('[purchaseDayOfWeek]', Time.at(d).strftime('%A'))
      oldArr = event.get('[prevEvent]')
      newArr = []
      oldArr << {'UniqueID' => event.get('[UniqueID]'), 'layer_name' => event.get('[layer_name]'), 'objecttype' => event.get('[objecttype]'), 'ownerid' => event.get('[ownerid]'), 'price' => event.get('[price]'), 'use_case' => event.get('[use_case]'), 'use_case_table' => event.get('[use_case_table]'), 'userid' => event.get('[userid]')}
      oldArr.each{|k| 
      k['hfOwnerid']='User ' + k['ownerid'].to_s 
      k['hfUserid']='User ' + k['userid'].to_s
      newArr << k}
      event.set('[purchase]', oldArr)
      # event.set('[purchase]', [{'UniqueID' => event.get('[UniqueID]'), 'layer_name' => event.get('[layer_name]'), 'objecttype' => event.get('[objecttype]'), 'ownerid' => event.get('[ownerid]'), 'price' => event.get('[price]'), 'use_case' => event.get('[use_case]'), 'use_case_table' => event.get('[use_case_table]'), 'userid' => event.get('[userid]')}])
    "
  }
  mutate {remove_field => [ "UniqueID", "layer_name", "objecttype", "ownerid", "price", "use_case", "use_case_table", "userid", "prevEvent", "tags" ]}
}
output {
  elasticsearch {
    hosts => ["http://15.237.93.29:8082/"]
    index => ["smart_crowd_jurnalism_price_layers_nodes"]
    action => "update"
    doc_as_upsert => true
    document_id => "%{videoid}"
  }
  stdout { codec => dots }
}
