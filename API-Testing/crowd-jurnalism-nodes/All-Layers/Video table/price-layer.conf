input {
  http_poller {
    urls => {
      smartapi => {
        method => get
        url => "https://articonf1.itec.aau.at:30103/api/use-cases/crowd-journalism-enum/tables/video/layers/Price_Layer/nodes"
        headers => {
          Accept => "application/json"
          Authorization => "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InJlZ3VsYXJAaXRlYy5hYXUuYXQiLCJjcmVhdGVkX2F0IjoiMjAyMS0wNC0xOSAxNjo1Nzo0OS4wNjQwNDIiLCJ2YWxpZF91bnRpbCI6IjIwMjEtMDQtMjAgMTY6NTc6NDkuMDY0MDQyIn0.buFPRVuRq1-FWW5ClqVU4U4UjIj962gLLCSm3ZBWLXU"
        }
      }
    }
    truststore => "C:/Users/Mirsat/Desktop/WORK/testing_logstash/API-Testing/smartapi.jks"
    truststore_password => "changeit"
    request_timeout => 4000
    connect_timeout => 100
    socket_timeout => 100
    schedule => { every => "30s" }
    codec => json
  }
}
# filter {
#   mutate {
#         gsub => [
#           "Total_Demand_MWh", "\"", ""
#         ]
#       }
#   mutate {convert => ["Total_Demand_MWh", "float"]}
#   date {
#     match => ["Timestamp", "yyyy-MM-dd HH:mm:ss"]
#     timezone => "Europe/Berlin"
#     target => "Timestamp"
#   }
# }
filter {
  mutate {
    add_field => {
      "dayOfWeek" => ""
    }
    add_field => {
      "ROI" => "0"
    }
    add_field => {
      "tags" => "0"
    }
    remove_field => [ "tags" ]
  }
  mutate {rename => ["geolocation_latitude", "[geolocation][lat]"]}
  mutate {rename => ["geolocation_longitude", "[geolocation][lon]"]}
  # date {
  #   match => ["creationTimestamp", "UNIX"]
  #   timezone => "Europe/Paris"
  # }
  # event.set('[totalPrice]', (event.get('[price]') * rand(1..5)))
  # event.set('[ROI]', ((event.get('[totalPrice]').to_f - event.get('[price]').to_f) / event.get('[totalPrice]').to_f) * 100)
  ruby {
    code => "
      require 'date'
		  require 'time'
      time = event.get('[creationTimestamp]')
      # d = DateTime.parse(time).to_time.to_i
      event.set('[dayOfWeek]', Time.at(time).strftime('%A'))
      if event.get('[firstTag]') == 0 then event.set('[firstTag]', 'Bombing').to_s end
      if event.get('[firstTag]') == 1 then event.set('[firstTag]', 'Fire').to_s end
      if event.get('[firstTag]') == 2 then event.set('[firstTag]', 'Sports Event').to_s end
      if event.get('[firstTag]') == 3 then event.set('[firstTag]', 'Music').to_s end
      if event.get('[firstTag]') == 4 then event.set('[firstTag]', 'Earthquake').to_s end
      if event.get('[firstTag]') == 5 then event.set('[firstTag]', 'Traffic Accident').to_s end
      if event.get('[objecttype]') == 0 then event.set('[objecttype]', 'Video').to_s end
      event.set('[creationTimestamp]', event.get('[creationTimestamp]').to_i)
    "
  }
}
output {
  elasticsearch {
    hosts => ["http://15.237.93.29:8082/"]
    index => ["smart_crowd_jurnalism_price_layers_nodes"]
    action => "update"
    doc_as_upsert => true
    document_id => "%{videoid}"
  }
  stdout { codec => dots }
}
