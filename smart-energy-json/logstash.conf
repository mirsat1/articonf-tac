input {
  file {
    start_position => "beginning"
    path => "C:/Users/Mirsat/Desktop/WORK/testing_logstash/smart-energy-json/out.csv"
    sincedb_path => "NULL"
  }
}
filter {
  csv {
    columns => ["Customer","Energy_Consumption_kWh","Heating_Consumption_kWh","Latitude","Longitude","Postcode","Price_AUD_MWh","Solar_Production_kWh","Timestamp","Total_Demand_MWh","UniqueID"]
    convert => {
      "Energy_Consumption_kWh" => "float"
      "Heating_Consumption_kWh" => "float"
      "Latitude" => "float"
      "Longitude" => "float"
      "Price_AUD_MWh" => "float"
      "Solar_Production_kWh" => "float"
      "Total_Demand_MWh" => "float"
    }
  }
  # date {
  #   match => ["Timestamp", "yyyy-MM-dd HH:mm:ss"]
  #   target => "@timestamp"
  #   timezone => "Europe/Berlin"
  # }
  if [Heating_Consumption_kWh] == "" {
    mutate {
      update => {
        "Heating_Consumption_kWh" => "0"
      }
    }
  }
  mutate {
    add_field => {
      "ROI_Energy_Consumtion" => "0.0"
    }
    add_field => {
      "ROI_Heating_Consumption" => "0.0"
    }
    add_field => {
      "ROI" => "0.0"
    }
    add_field => {
      "Price_AUD_kWh" => "0.0"
    }
    add_field => {
      "Energy_Earnings" => "0.0"
    }
    convert => {
      "Energy_Consumption_kWh" => "float"
      "Heating_Consumption_kWh" => "float"
      "Latitude" => "float"
      "Longitude" => "float"
      "Solar_Production_kWh" => "float"
      "ROI_Energy_Consumtion" => "float"
      "ROI_Heating_Consumption" => "float"
      "ROI" => "float"
    }
    rename => {
      "Latitude" => "[position][lat]"
      "Longitude" => "[position][lon]"
    }
  }
  ruby {
    code => "
      if event.get('[Energy_Consumption_kWh]').to_f.nonzero? and event.get('[Solar_Production_kWh]').to_f.nonzero? then event.set('[ROI_Energy_Consumtion]', ((event.get('[Solar_Production_kWh]').to_f / event.get('[Energy_Consumption_kWh]').to_f) * 100).to_f) else event.set('[ROI_Energy_Consumtion]', 0) end
      if event.get('[Heating_Consumption_kWh]').to_f.nonzero? and event.get('[Solar_Production_kWh]').to_f.nonzero? then event.set('[ROI_Heating_Consumption]', ((event.get('[Solar_Production_kWh]').to_f / event.get('[Heating_Consumption_kWh]').to_f) * 100).to_f) else event.set('[ROI_Heating_Consumption]', 0) end
      if (event.get('[Energy_Consumption_kWh]').to_f.nonzero? or event.get('[Heating_Consumption_kWh]').to_f.nonzero?) and event.get('[Solar_Production_kWh]').to_f.nonzero? then event.set('[ROI]', ((event.get('[Solar_Production_kWh]').to_f / (event.get('[Heating_Consumption_kWh]').to_f + event.get('[Energy_Consumption_kWh]').to_f)) * 100).to_f) else event.set('[ROI]', 0) end
      if event.get('[Price_AUD_MWh]').to_f.nonzero? then event.set('[Price_AUD_kWh]', (event.get('[Price_AUD_MWh]').to_f * 1000).to_f) else event.set('[Price_AUD_kWh]', 0) end
      event.set('[Energy_Earnings]', ((event.get('[Price_AUD_kWh]').to_f * (event.get('[Heating_Consumption_kWh]').to_f + event.get('[Energy_Consumption_kWh]').to_f)) - (event.get('[Solar_Production_kWh]') * event.get('[Price_AUD_kWh]'))).to_f)
      "
  }
}
output {
  elasticsearch {
    hosts => ["http://15.237.93.29:8082/"]
    index => ["smart_smart_energy_nolayering_v2"]
  }
  stdout {codec => "dots"}
  if "_dateparsefailure" in [tags] {
    stdout {codec => "rubydebug"}
  }
  if "_grokparsefailure" in [tags] {
    stdout {codec => "rubydebug"}
  }
}